# How to Create and Use a Claude Knowledge Graph Directory (v2)

## What Is the _claude Directory?

The _claude directory is a structured knowledge graph designed to help AI assistants like Claude effectively understand, navigate, and work with your codebase. It serves as a comprehensive repository of project documentation organized to maximize AI comprehension and retrieval while preserving critical context across sessions.

This directory contains structured information about:
- Code structure, relationships, and implementation details
- Design patterns and best practices used throughout the project
- Technical documentation and project architecture
- Implementation plans and changes over time
- Troubleshooting information and debugging history
- Technical specifications and integration details

## Why Use a Claude Knowledge Graph?

1. **Enhanced AI Understanding**: Helps Claude develop a comprehensive mental model of your project's architecture and relationships
2. **Context Persistence**: Maintains knowledge between different sessions with Claude
3. **Accelerated Onboarding**: New developers (human or AI) can quickly understand project architecture and implementation details
4. **Decision Documentation**: Captures design decisions, their detailed rationale, and implementation approaches
5. **Evolution Tracking**: Records how and why the project changes over time
6. **Knowledge Centralization**: Creates a single source of truth for implementation details and technical decisions
7. **Reduced Repetition**: Avoids repeatedly explaining the same project concepts to Claude in each session
8. **Technical Context Preservation**: Preserves critical implementation knowledge that might otherwise be lost over time

## Setting Up a _claude Directory for a New Project

### Streamlined Directory Structure

Create these core directories and files:

```
_claude/
├── MODEL_DOCUMENTATION.md       # Comprehensive project overview
├── README.md                    # Knowledge graph overview and usage
├── memory_anchors.md            # Stable code reference points
├── code_structure/              # Combined code relationships and metadata
│   ├── README.md                # Directory overview
│   ├── function_calls.json      # Function relationship mapping
│   ├── module_structure.json    # Module dependency mapping
│   ├── component_graph.json     # Component relationship mapping
│   └── [component_name].md      # Component-specific documentation
├── patterns/                    # Implementation pattern libraries
│   ├── README.md                # Directory overview
│   └── [pattern_name].md        # Pattern documentation
├── delta/                       # Version-to-version changes during sessions
│   ├── README.md                # Directory overview
│   └── session_template.md      # Template for recording session changes
├── enhancements/                # Planning documents for future features
│   ├── README.md                # Directory overview
│   └── feature_plan_template.md # Template for feature planning
├── troubleshooting/             # Problem-solution pairs and debugging history
│   ├── README.md                # Directory overview
│   ├── guides/                  # General component guides
│   │   └── component_guide_template.md # Template for component guides
│   └── specific_cases/          # Specific debugging cases
│       └── debugging_case_template.md  # Template for debugging cases
├── tests/                       # Test scripts and test data
│   └── README.md                # Directory overview
└── runs/                        # Application execution logs
    └── README.md                # Directory overview
```

### Essential Files

1. **MODEL_DOCUMENTATION.md**: A comprehensive overview of your project including:
   - Purpose and goals of the project
   - Data schema/models with complete relationship graphs
   - Core processing patterns and pipelines with flow diagrams
   - Key interfaces, entry points, and APIs
   - Invariants, constraints, and error states
   - System architecture and component interactions

2. **README.md**: Overview of the _claude directory itself:
   - Purpose of the knowledge graph
   - Directory structure and organization
   - Guidelines for using the knowledge graph with Claude
   - Maintenance guidelines and processes
   - Special instructions for Claude when working with this repository

3. **memory_anchors.md**: Stable reference points in the code:
   - Format: `# [ANCHOR-NAME] <description> [UUID]`
   - Each anchor with a location (file and line number range)
   - Unique UUIDs for each anchor to guarantee uniqueness
   - Guidelines for adding new anchors
   - Purpose explanation for different types of anchors

### Sub-Directories and Their Purpose

#### 1. code_structure/

*Comprehensive information about code organization, relationships, and technical details*

This directory combines code mapping and metadata to provide a complete picture of the codebase architecture. It helps Claude understand how different parts of the code relate to each other.

Key files:
- **function_calls.json**: Maps which functions call which others
- **module_structure.json**: Documents module relationships and dependencies
- **component_graph.json**: Dependency graph of components
- **[component_name].md**: Detailed documentation for specific components

#### 2. patterns/

*Implementation pattern libraries with detailed documentation*

This directory documents standard implementation patterns used throughout the codebase. Each pattern includes an explanation, code examples, and guidance on when to use it.

Each pattern document should include:
- Pattern overview and problem statement
- Solution approach with diagrams
- Implementation details with code examples
- When to use and when not to use the pattern
- Benefits, trade-offs, and limitations
- Related patterns and alternatives
- Real examples from your codebase

#### 3. delta/

*Detailed records of changes made during implementation sessions*

This directory contains records of changes made to the codebase during each implementation session. It provides a "dy/dx" of changes applied during a particular session.

Each delta record should document:
- Date and session identifier
- Files modified, added, or removed
- Functions modified, added, or removed with signature details
- API changes with before/after code examples
- Database schema changes
- Brief explanation of the reason for each change
- Testing performed during the session

#### 4. enhancements/

*Planning documents for future features and improvements*

This directory contains planning documents for future features and improvements. It serves as a place to draft enhancement ideas before executing them.

Each enhancement plan should include:
- Objective and motivation for the enhancement
- Current problem or limitation being addressed
- Planning approach and design considerations
- Proposed implementation strategy
- Technical specifications
- Potential challenges and mitigation approaches
- Success criteria and expected outcomes
- Future considerations and next steps

#### 5. troubleshooting/

*Comprehensive documentation about problems, solutions, and debugging history*

This directory combines general guides and specific debugging cases to provide information about common problems, their solutions, diagnostic approaches, and detailed records of significant debugging sessions.

Two key subdirectories:
- **guides/**: General troubleshooting guides and Q&A for components
- **specific_cases/**: Detailed records of specific debugging sessions

#### 6. tests/

*Test scripts and associated test data*

This directory provides scripts that test specific functions or components, along with the test data needed to run those tests. These files help understand how components are expected to behave and verify their functionality.

#### 7. runs/

*Application execution logs from when the engine is run*

This directory provides logs of actual application executions, including configuration parameters, processing results, error information, and performance metrics. It stores the real runtime data generated when the system is operating.

## Best Practices for Comprehensive Documentation

### 1. Start with a Strong Foundation

For a new project, focus on creating these essential components first:
1. **MODEL_DOCUMENTATION.md**: Create a comprehensive technical overview
2. **memory_anchors.md**: Identify key code sections with stable reference points
3. **patterns/**: Document 2-3 core implementation patterns thoroughly
4. **code_structure/**: Create a basic function and component relationship map

### 2. Adopt an Incremental Approach

Build the knowledge graph incrementally alongside your development:
- Start with high-level architecture documents
- Add detailed component documentation as they're developed
- Document patterns as they emerge in the codebase
- Record debugging sessions immediately after solving problems
- Update delta records with each significant change

### 3. Follow Consistent Documentation Standards

Maintain consistency across all documentation:
- Use standardized Markdown formatting throughout
- Follow consistent naming conventions (e.g., `snake_case` for files)
- Use standard section headings within similar file types
- Include code examples with proper syntax highlighting
- Use diagrams for complex relationships and flows
- Include metadata (dates, versions, authors) in all documents

### 4. Prioritize Documentation By Impact

Focus your documentation efforts where they'll have the most impact:
- Complex algorithms and non-intuitive code
- Error-prone areas that need careful handling
- Components with multiple integration points
- Code that implements important business logic
- Areas that undergo frequent changes
- Components that require AI-specific processing

### 5. Use Structured Formats for Machine Readability

Make documentation easily processable by both humans and AI:
- Use structured JSON for relationship data
- Use tables for parameter listings and mappings
- Include well-formatted code examples
- Organize documents with clear hierarchical headings
- Use consistent terminology across all documents
- Include cross-references between related documents

## Maintaining and Using the Knowledge Graph Effectively

### During Active Development

1. **Update the Knowledge Graph In Real-Time**:
   - Document new patterns as they emerge
   - Record solved problems immediately
   - Update component documentation with changes
   - Create delta records for implementation sessions
   - Add test results after validation

2. **Use the Knowledge Graph as a Development Guide**:
   - Consult patterns/ before implementing new features
   - Review memory_anchors.md to locate key code sections
   - Review enhancements/ when planning new features
   - Check troubleshooting/ for established solutions to common problems

3. **Maintain Documentation Quality**:
   - Periodically review and update all documents
   - Remove outdated information
   - Consolidate duplicate content
   - Verify that memory anchors are still valid
   - Ensure documentation matches current implementation

### Working Effectively with Claude

1. **Start Every Session with the Knowledge Graph**:
   - Begin by directing Claude to _claude/ at the start of each session
   - Have Claude read MODEL_DOCUMENTATION.md first for context
   - Point to specific files for targeted assistance
   - Mention relevant memory anchors when discussing code
   
   Example opening prompt:
   ```
   Let's work on implementing a new feature for the project.
   
   Before we start, please review the relevant documentation in the _claude directory:
   1. First read _claude/MODEL_DOCUMENTATION.md to understand the overall system
   2. Then check _claude/patterns/api_interaction_pattern.md for standard API approaches
   3. Review _claude/enhancements/feature_plan_template.md to understand our approach
   
   The code we'll be working on is in api/module.js at [ANCHOR-MODULE-API].
   ```

2. **Use Structured Guidance with Claude**:
   - Ask Claude to review patterns/ before implementing solutions
   - Have Claude check delta/ to understand recent changes
   - Direct Claude to relevant troubleshooting/guides/ for specific problems
   - Use memory anchors to help Claude locate code sections
   
   Example structured guidance:
   ```
   I need to implement a new feature that processes data from an external API.
   
   Please:
   1. First review _claude/patterns/data_processing_pattern.md
   2. Then look at _claude/code_structure/api_component.md to understand the existing approach
   3. Check if _claude/troubleshooting/guides/api_integration_guide.md has any insights for this task
   4. Suggest how we should structure this new feature following our established patterns
   ```

3. **Leverage Claude for Documentation Updates**:
   - Ask Claude to suggest updates to documentation based on changes
   - Have Claude draft new documentation files
   - Request Claude to analyze test results and create summaries
   - Have Claude help maintain consistency across documentation
   
   Example documentation request:
   ```
   I've just implemented a new feature that adds data validation to our API. 
   
   Please:
   1. Create a draft for _claude/delta/session_2025-04-01_api_validation.md following our standard format
   2. Update _claude/patterns/data_validation_pattern.md to include this new approach
   3. Create a new entry for _claude/troubleshooting/guides/validation_guide.md to help developers use this feature
   4. Suggest any places in MODEL_DOCUMENTATION.md that should be updated
   ```

4. **Encourage Holistic Understanding**:
   - Ask Claude to identify relationships between components
   - Have Claude trace function call paths for specific operations
   - Request pattern identification in new code
   - Have Claude analyze integration points between components

5. **Debug Issues with Knowledge Graph Context**:
   - Have Claude review relevant troubleshooting/specific_cases/ entries for similar issues
   - Ask Claude to check troubleshooting/guides/ for common approaches
   - Reference the specific code sections using memory anchors
   - Request Claude to suggest solutions based on established patterns

### Preventing Knowledge Graph Redundancy

Keep your knowledge graph efficient and maintainable:

1. **Use References Instead of Duplication**:
   - Reference other documents instead of copying content
   - Use memory anchors to refer to specific code sections
   - Create index documents that point to detailed documentation
   - Use JSON for relationship mapping instead of text duplication

2. **Optimize Document Focus**:
   - Each document should cover a single topic or component
   - Split large documents into focused sub-documents
   - Combine related micro-documents into coherent units
   - Use README files as directory indexes

3. **Implement Regular Cleanup**:
   - Schedule regular reviews of the knowledge graph
   - Archive or remove outdated documentation
   - Consolidate similar information
   - Verify that all memory anchors still exist
   - Update documentation to reflect current implementation

## Conclusion

A comprehensive Claude knowledge graph transforms how AI assistants understand and work with your codebase. By creating structured, focused documentation that captures not just what your code does, but why and how it works, you enable Claude to provide more effective, context-aware assistance.

Remember that the knowledge graph serves as Claude's "long-term memory" for your project. Each time you interact with Claude, direct it to first review the knowledge graph to ensure it has full context before providing assistance. This investment in documentation pays dividends in more accurate, insightful, and effective AI collaboration.

By following these comprehensive guidelines, you'll create a knowledge graph that serves both human developers and AI assistants equally well, preserving critical context across the entire lifecycle of your project.